/*
Generated by ChatGPT
*/
function previewImages(event) {
    const files = event.target.files;
    const previewDiv = document.getElementById('preview');
    previewDiv.innerHTML = ''; // Clear existing content

    if (files.length > 0) {
        Array.from(files).forEach(file => {
            const reader = new FileReader();
            reader.onload = function(e) {
                // Append each image preview to the preview div
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = "Image Preview";
                img.style.maxWidth = '100%';
                img.style.maxHeight = '200px';
                img.style.border = '1px solid #ddd';
                img.style.borderRadius = '5px';
                img.style.marginTop = '10px';
                previewDiv.appendChild(img);
            };
            reader.readAsDataURL(file);
        });
    } else {
        previewDiv.innerHTML = '<p>No images selected</p>';
    }
}

async function submitForm() {
    const model = document.getElementById('model').value;
    const apiKey = document.getElementById('api_key').value;
    const imageFiles = document.getElementById('image_file').files;
    const responseDiv = document.getElementById('response');

    // Clear any previous responses
    responseDiv.innerHTML = '';

    if (imageFiles.length === 0) {
        responseDiv.innerHTML = '<p style="color: red;">Please upload at least one image file.</p>';
        return;
    }

    // Convert each image file to base64 and add to an array
    const base64Images = await Promise.all(Array.from(imageFiles).map(file => toBase64(file)));

    try {
        // Make API request with images_base64 array
        const response = await fetch('/api/process', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: model,
                api_key: apiKey,
                images_base64: base64Images,
            })
        });

        // Parse and display response
        if (response.ok) {
            const result = await response.json();
            responseDiv.innerHTML = `<pre>${JSON.stringify(result, null, 2)}</pre>`;
        } else {
            const error = await response.json();
            responseDiv.innerHTML = `<p style="color: red;">Error: ${error.detail || 'Unable to process'}</p>`;
        }
    } catch (error) {
        responseDiv.innerHTML = `<p style="color: red;">Error: ${error.message}</p>`;
    }
}

// Helper function to convert image file to base64
function toBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
    });
}
